#encoding:utf-8
"""Модуль отвечающий за processing_IO-обработку входных или выходных данных"""
from sys import stdout
from random import randint
from config import min_height, min_width

#Приветствие и прием данных
def hello_amigo(height, width):
    """Приветствуем пользователя"""

    print "Сейчас мы создадим наш лабиринт.Пожалуйста,придерживайтесь правил указаных ниже."+  '\n'\
          "Размер в ширину-должен находитсься в диапазоне от " + str(min_width) + " до " + str(width) + '.' + '\n' + \
          "Размер в высоту-должен находитсься в диапазоне от " + str(min_height) + " до " + str(height) + '.'
    while True:
        try:
            x, y = input('''Введи через запятую размеры для нашего будущего лабиринта.
Первое число-размерность в ширину,второе число-в высоту.''' + '\n')
            if x < 0 or y < 0:
                print "Размеры не могут быть отрицательным числом"  + '\n'
            elif x < min_width or y < min_height:
                print "Размеры не могут быть меньше рекомендуемых"  + '\n'
            elif type(x) == float or type(y) == float:
                print "Размеры не могут быть указаны нецелым числом" + '\n'
            elif x > width or y > height:
                print "Нерекомендуется использовать такие большие размеры из за внутрених ограничений программы \n "
            elif type(x) == str or type(y) == str:
                print "Размеры не могут быть указаны текстом \n "
            elif x > 0 and y > 0 and type(x) == int and type(y) == int:
                return x, y
        except TypeError:
            print "Упс.Кажется Вы ввели некоректные данные(например нецелое число)" + '\n'
        except NameError:
            print "Упс.Кажется Вы ввели некоректные данные(например какую нибудь строку или набор букв)" + '\n'
        except:
            print "Упс.Кажется Вы ввели некоректные данные." + '\n'

def promt(x):
    """Обработка либо методов работы алгоритмов,либо решения о типе лабиринта"""
    while True:
        if x == 'method_input':
            argument = '''Привет Амиго!!!Я предлагаю тебе выбор.
Ты хочешь создать лабиринт автоматически?Тогда введи цифру "1" и нажми "Enter".
Иначе если ты хочешь загрузить лабиринт из файла-введи цифру "2" и нажми "Enter"''' + '\n'
        elif x == 'search':
            argument = '''Теперь выберем механизм поиска пути.
1-Поиск в глубину(DFS) более быстрый но делает слишком много лишних шагов.
2-Поиск в ширину(BFS)-Делает меньше шагов,всегда находит короткий путь,но более ресурсоемкий.
1(Поиск в глубину(DFS)) или 2(Поиск в ширину(BFS))?.Сделайте выбор и нажмите "Enter" ''' + '\n'
        try:
            value = input(argument)
            # Условности-эксепшены фильтрующие непотребство
            # которое придет от нерадивого пользователя
            # Череда проверок
            if value < 0:
                print "Либо 1,либо 2.Никаких отрицательных чисел \n "
            elif value > 2 and type(value) == int:
                print "Введеные данные-неверны.Они не могут превышать 2 \n "
            elif value < 1 and type(value) == str:
                print "Введеные данные-неверны.Они не могут быть менее 1 \n "
            elif type(value) == float:
                print "Надо вводить целочисленые значения а не дробные(2.0 и 1.0-не принимаются) \n "
            elif type(value) == type(str):
                print "Нужно ввести цифры а не текст \n "
            elif (value == 1 or value == 2) and len(str(value)) == 1:
                return value
            else:
                print "Неверные входные данные.Пожалуйста,введите правильные значения"
        except SyntaxError:
            print "Обнаружены проблемы с входными данными.Пожалуйста,повторно проверьте все входные данные"
        except TypeError:
            print "Упс.Кажется Вы ввели некоректные данные(например нецелое число)" + '\n'
        except NameError:
            print "Упс.Кажется Вы ввели некоректные данные(например какую нибудь строку или набор букв)" + '\n'
        except:
            print "Кажется что то пошло не так.Проверьте входные данные и попробуйте снова.Если ошибка будет повторяться-обратитесь к разработчику"

def promt_point_way(field, N, M, point):
    """Запрос точек начала и конца пути для лабиринта
    при режиме автоматической генерации вышеупомянутого"""
    retry = 'Пожалуйста,будьте внимательнее и попробуйте снова.' + '\n' \
            'Введеные данные должны быть разделены запятой ' \
            'и являться положительными целыми числами' + '\n' \
            "Абцисса(горизонтальная координата) точки " \
            "должна быть не более чем " + str(M - 2) + " и не менее " + str(min_width) + '\n' \
            "Ордината(вертикальная координата) точки должна быть не более чем " \
            + str(N - 2) + " и не менее " + str(min_height) + '\n'
    while True:
        try:
            y, x = input("Введите через запятую координаты " + point + " пути" + '\n')
            if x < 0 or y < 0:
                print"Координаты не могут быть отрицательным числом \n " + retry
            elif x == 0 or y == 0 or x == M or y == N:
                print "Упс.Введены координаты указывающие на стену \n " + retry
            elif x >= 1 and y >= 1 and field[x, y] != -1:
                P = [x, y]
                return P
            elif field[x, y] == -1:
                print "Упс.На указанных вами координатах находится непроходимый участок(блок) '\n'" + retry
            elif type(x) == float or type(y) == float:
                print "Координаты не могут быть указаны нецелым числом '\n "
            elif type(x) == str or type(y) == str:
                print "Координаты  не могут быть указаны текстом \n "
        except TypeError:
            print "Упс.Кажется Вы ввели некоректные данные(например нецелое число)" + '\n' + retry
        except NameError:
            print "Упс.Кажется Вы ввели некоректные данные(например какую нибудь строку или набор букв)" + '\n' + retry
        except IndexError:
            print "Ууу...слишком далеко за пределы карты действий" + '\n' + retry
        except:
            print "Упс.Кажется Вы ввели некоректные данные." + '\n' + retry

#Обработка и трансформация
def block_set(field, N, M):
    """Примитивнийший механизм генерации даже не лабиринта...
       блоков что создадут подобие лабиринта"""
    i = 0
    X = N-2
    Y = M-2
    b = X * Y / 4  # Число блоков не слишком большое иначе непроходимость возрастает.
    while i < b:
        x = randint(1, X)
        y = randint(1, Y)
        if field[x, y] != -1:
            field[x, y] = -1
            i += 1

def transform_out(y, x, field):
    """Трансформация в понятный для пользвателя вид."""
    if field[x][y] == - 1:
        return '#'
    elif field[x][y] == -2:
        return '+'
    elif field[x][y] == 0:
        return ' '
    elif field[x][y] == 2:
        return 'S'
    elif field[x][y] == 3:
        return 'F'

def wall_horizontal(field, row):
    """Добавим горизонатльные стенки для лабиринта"""
    i = 0
    for element in field[row]:
        field[row, i] = -1
        i += 1

def wall_vertical(field, column, N):
    """Вертикальные стенки"""
    i = 0
    while i < N:
        field[i, column] = -1
        i += 1

def final_check(field, F):
    """если значение по координатам конца пути изменилось
       -значит мы нашли путь"""
    if field[F[0]][F[1]] == -2:
        print "Поздравляю Амиго!Мы нашли путь =]"
        return True
    else:
        print "Между двумя указаными точками-нет пути"
        return False

#Демонстрация
def show_way(way):
    """Демонстрация пути следования"""
    print "Нам потребовалось " + str(
        len(way[0]) - 1) + " ходов,чтобы добраться до выхода" + '\n' + \
          'Ниже перчислены наши шаги от точки входа до выхода' + '\n'
    for element in xrange(len(way[0])):
        stdout.write(
            "%3s" % str(way[1][element]) + ' | ' + str(way[0][element]))
        print ' '

def show_labirinth(N, M, field):
    """Отрисуем лабиринт и покажем его пользователю
       смешано с индексами для лучшей визуализации"""
    # Выведем строку для координат
    i = 0
    for element in xrange(M):
        stdout.write("%1s" % str(element)[-1])
    print ' '
    y = 0
    while y < N:
        x = 0
        while x < M:
            stdout.write("%1s" % str(transform_out(x, y, field))[-1])
            x += 1
        stdout.write(str(i)[-1])
        i += 1
        print ' '
        y += 1
    for element in xrange(M):
        stdout.write("%1s" % str(element)[-1])
    print ' '